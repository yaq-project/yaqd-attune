{
    "config": {
        "enable": {
            "default": true,
            "doc": "Disable this daemon. The kind entry-point will not attempt to start this daemon.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "factor": {
            "default": 2,
            "doc": "multiplier of the speed of light, use negative value to invert motion relative to the zero position",
            "type": "int"
        },
        "limits": {
            "default": [
                -Infinity,
                Infinity
            ],
            "doc": "Configuration limits are strictly optional.",
            "items": "double",
            "origin": "has-limits",
            "type": "array"
        },
        "log_level": {
            "default": "info",
            "doc": "Set daemon log-level.",
            "origin": "is-daemon",
            "type": {
                "name": "level",
                "symbols": [
                    "debug",
                    "info",
                    "notice",
                    "warning",
                    "error",
                    "critical",
                    "alert",
                    "emergency"
                ],
                "type": "enum"
            }
        },
        "log_to_file": {
            "default": false,
            "doc": "Optionally force logging to a file.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "make": {
            "default": null,
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "model": {
            "default": null,
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "out_of_limits": {
            "default": "closest",
            "doc": "Control behavior of daemon when set_position is given a value outside of limits.",
            "name": "out_of_limits",
            "origin": "has-limits",
            "symbols": [
                "closest",
                "ignore",
                "error"
            ],
            "type": "enum"
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "origin": "is-daemon",
            "type": "int"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "wrapped_daemon": {
            "doc": "port or host:port string of the wrapped delay stage",
            "type": [
                "int",
                "string"
            ]
        }
    },
    "doc": "yaq daemon representing an attune delay",
    "installation": {
        "PyPI": "https://pypi.org/project/yaqd-attune"
    },
    "links": {
        "bugtracker": "https://github.com/yaq-project/yaqd-attune/issues",
        "source": "https://github.com/yaq-project/yaqd-attune"
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "origin": "is-daemon",
            "request": [],
            "response": "boolean"
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_control_active": {
            "doc": "Get map of control hardware to enabled state",
            "request": [],
            "response": {
                "type": "map",
                "values": "boolean"
            }
        },
        "get_control_positions": {
            "doc": "Get underlying control positions, provides a mapping of names to positions, in native units.",
            "request": [],
            "response": {
                "type": "map",
                "values": "double"
            }
        },
        "get_control_tunes": {
            "doc": "Get cached control tunes, provides a mapping of names to tunes, in native units.",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_dependent_hardware": {
            "doc": "Get mapping of name to host:port string. 'localhost' should be replaced on the client side with the host for this daemon.",
            "request": [],
            "response": {
                "type": "map",
                "values": "string"
            }
        },
        "get_destination": {
            "doc": "Get current daemon destination.",
            "origin": "has-position",
            "request": [],
            "response": "double"
        },
        "get_instrument": {
            "doc": "Get the currently in use instrument object",
            "request": [],
            "response": "Instrument"
        },
        "get_limits": {
            "doc": "Get daemon limits.Limits will be the <a href='https://en.wikipedia.org/wiki/Intersection_(set_theory)'>intersection</a> of config limits and driver limits (when appliciable).",
            "origin": "has-limits",
            "request": [],
            "response": {
                "items": "double",
                "type": "array"
            }
        },
        "get_offset": {
            "doc": "Get the applied offset in ps",
            "request": [],
            "response": "double"
        },
        "get_position": {
            "doc": "Get current daemon position.",
            "origin": "has-position",
            "request": [],
            "response": "double"
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_units": {
            "doc": "Get units of daemon. These units apply to the position and destination properties.",
            "origin": "has-position",
            "request": [],
            "response": [
                "null",
                "string"
            ]
        },
        "get_zero_position": {
            "doc": "Get the zero position in underlying daemon units",
            "request": [],
            "response": "double"
        },
        "get_zero_position_limits": {
            "doc": "Get the zero position underlying daemon limits",
            "request": [],
            "response": {
                "items": "double",
                "type": "array"
            }
        },
        "get_zero_position_units": {
            "doc": "Get the zero position underlying daemon units",
            "request": [],
            "response": "string"
        },
        "home": {
            "doc": "Initiates the homing procedure.\nThe daemon will report as busy during the homing procedure.\n After the homing procedure is complete, the daemon will return to the current destination.\n",
            "origin": "is-homeable",
            "request": [],
            "response": "null"
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "origin": "is-daemon",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "in_limits": {
            "doc": "Check if a given position is within daemon limits.",
            "origin": "has-limits",
            "request": [
                {
                    "name": "position",
                    "type": "double"
                }
            ],
            "response": "boolean"
        },
        "set_control_active": {
            "doc": "Set the cached value of the control hardware, causes delay to recompute its offset and adjust appropriately",
            "request": [
                {
                    "name": "control",
                    "type": "string"
                },
                {
                    "name": "active",
                    "type": "boolean"
                }
            ],
            "response": "null"
        },
        "set_control_position": {
            "doc": "Set the cached value of the control hardware, causes delay to recompute its offset and adjust appropriately",
            "request": [
                {
                    "name": "control",
                    "type": "string"
                },
                {
                    "name": "position",
                    "type": "double"
                }
            ],
            "response": "null"
        },
        "set_control_tune": {
            "doc": "Set the cached value of the control hardware tune, causes delay to recompute its offset and adjust appropriately",
            "request": [
                {
                    "name": "control",
                    "type": "string"
                },
                {
                    "name": "tune",
                    "type": [
                        "null",
                        "string"
                    ]
                }
            ],
            "response": "null"
        },
        "set_instrument": {
            "doc": "Set the currently in use instrument object. Also triggers a restart",
            "request": [
                {
                    "name": "instrument",
                    "type": "Instrument"
                }
            ],
            "response": "null"
        },
        "set_position": {
            "doc": "Give the daemon a new destination, and begin motion towards that destination.",
            "origin": "has-position",
            "request": [
                {
                    "name": "position",
                    "type": "double"
                }
            ],
            "response": "null"
        },
        "set_relative": {
            "doc": "Give the daemon a new destination relative to its current position. Daemon will immediately begin motion towards new destination. Returns new destination.",
            "origin": "has-position",
            "request": [
                {
                    "name": "distance",
                    "type": "double"
                }
            ],
            "response": "double"
        },
        "set_zero_position": {
            "doc": "Set the zero position in underlying daemon units",
            "request": [
                {
                    "name": "position",
                    "type": "double"
                }
            ],
            "response": "null"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "origin": "is-daemon",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        }
    },
    "properties": {
        "destination": {
            "control_kind": "hinted",
            "dynamic": true,
            "getter": "get_destination",
            "limits_getter": null,
            "options_getter": null,
            "record_kind": "data",
            "setter": "set_position",
            "type": "double",
            "units_getter": "get_units"
        },
        "offset": {
            "control_kind": "normal",
            "dynamic": true,
            "getter": "get_offset",
            "limits_getter": null,
            "options_getter": null,
            "record_kind": "data",
            "setter": null,
            "type": "double",
            "units_getter": "get_units"
        },
        "position": {
            "control_kind": "hinted",
            "dynamic": true,
            "getter": "get_position",
            "limits_getter": "get_limits",
            "options_getter": null,
            "record_kind": "data",
            "setter": null,
            "type": "double",
            "units_getter": "get_units"
        },
        "zero_position": {
            "control_kind": "normal",
            "dynamic": true,
            "getter": "get_zero_position",
            "limits_getter": "get_zero_position_limits",
            "options_getter": null,
            "record_kind": "metadata",
            "setter": "set_zero_position",
            "type": "double",
            "units_getter": "get_zero_position_units"
        }
    },
    "protocol": "attune-delay",
    "requires": [],
    "state": {
        "control_active": {
            "default": {},
            "doc": "Weather or not a particular control is active",
            "type": "map",
            "values": "boolean"
        },
        "control_position": {
            "default": {},
            "doc": "Cached position of the control hardware",
            "type": "map",
            "values": "double"
        },
        "control_tunes": {
            "default": {},
            "doc": "Cached tune of the control hardware",
            "type": "map",
            "values": [
                "null",
                "string"
            ]
        },
        "destination": {
            "default": NaN,
            "origin": "has-position",
            "type": "double"
        },
        "hw_limits": {
            "default": [
                -Infinity,
                Infinity
            ],
            "items": "double",
            "origin": "has-limits",
            "type": "array"
        },
        "offset": {
            "default": 0.0,
            "doc": "Currently applied offset due to cosetting",
            "type": "double"
        },
        "position": {
            "default": NaN,
            "origin": "has-position",
            "type": "double"
        },
        "zero_position": {
            "default": 0.0,
            "doc": "Position in underlying stage units that represents the zero position",
            "type": "double"
        }
    },
    "traits": [
        "has-limits",
        "has-position",
        "is-daemon",
        "is-homeable"
    ],
    "types": [
        {
            "fields": [
                {
                    "name": "type",
                    "type": "string"
                }
            ],
            "name": "Transition",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "name",
                    "type": "string"
                }
            ],
            "name": "Setable",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "independent",
                    "type": {
                        "items": "double",
                        "type": "array"
                    }
                },
                {
                    "name": "dependent",
                    "type": {
                        "items": "double",
                        "type": "array"
                    }
                }
            ],
            "name": "Tune",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "ranges",
                    "type": {
                        "type": "map",
                        "values": {
                            "items": "double",
                            "type": "array"
                        }
                    }
                },
                {
                    "name": "default",
                    "type": [
                        "null",
                        "string"
                    ]
                }
            ],
            "name": "DiscreteTune",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "name",
                    "type": "string"
                },
                {
                    "name": "tunes",
                    "type": {
                        "type": "map",
                        "values": [
                            "Tune",
                            "DiscreteTune"
                        ]
                    }
                }
            ],
            "name": "Arrangement",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "name",
                    "type": "string"
                },
                {
                    "name": "arrangements",
                    "type": {
                        "type": "map",
                        "values": "Arrangement"
                    }
                },
                {
                    "name": "setables",
                    "type": {
                        "type": "map",
                        "values": "Setable"
                    }
                },
                {
                    "name": "transition",
                    "type": "Transition"
                }
            ],
            "name": "Instrument",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "shape",
                    "type": {
                        "items": "int",
                        "type": "array"
                    }
                },
                {
                    "name": "typestr",
                    "type": "string"
                },
                {
                    "name": "data",
                    "type": "bytes"
                },
                {
                    "name": "version",
                    "type": "int"
                }
            ],
            "logicalType": "ndarray",
            "name": "ndarray",
            "type": "record"
        }
    ]
}